import numpy as np
import pandas as pd
import torch
from leaspy import Leaspy
import matplotlib.pyplot as plt
import argparse
import os

from nnModels.CVAE2D import CVAE2D
from nnModels.CVAE2D_ORIGINAL import CVAE2D_ORIGINAL
from utils_display.display_individual_observations_2D import display_individual_observations_2D


if __name__=="__main__":
    # argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--data', type=str, required=False, default="./data_csv/starmen_dataset.csv",
                        help='csv file path')
    parser.add_argument('--nnmodel_name', type=str, required=False, default='CVAE2D',
                        help='Name of the NN model that will be used')
    parser.add_argument('--gamma', type=float, required=False, default=100,
                        help='hyperparameter gamma value used for computing the loss')
    parser.add_argument('--beta', type=float, required=False, default=5,
                        help='hyperparameter beta value used for computing the loss, default = 5')
    parser.add_argument('--dimension', type=int, required=False, default=4,
                        help='size of the latent representation generated by the neural network encoder, default =4')
    parser.add_argument('f', '--freeze', type=str, required=False, default='y',
                        help='freeze convolution layer ? default = y')
    args = parser.parse_args()
    freeze_path = "freeze_conv" if args.freeze == 'y' else "no_freeze"

    # Parameters
    latent_representation_size = args.dimension
    beta = args.beta
    gamma = args.gamma
    longitudinal_iteration = 200
    nn_saving_path = f"saved_models_2D/{freeze_path}/CVAE2D_{latent_representation_size}_{beta}_{gamma}_{longitudinal_iteration}.pth"
    longitudinal_saving_path = f"saved_models_2D/{freeze_path}/longitudinal_estimator_params_CVAE2D_{latent_representation_size}_{beta}_{gamma}_{longitudinal_iteration}.json"
    # dataset_path = "./data_csv/starmen_dataset.csv"      # Consider the whole dataset
    dataset_path = "./data_csv/starmen_test_set.csv"   # Consider only the test set 
    df_dataset = pd.read_csv(dataset_path)
    output_path = f"results_reconstruction/CVAE2D_{latent_representation_size}_{beta}_{gamma}_{longitudinal_iteration}/"

    # Loading the models
    model = CVAE2D_ORIGINAL(latent_representation_size)
    model.load_state_dict(torch.load(nn_saving_path, map_location='cpu'))
    model.training = False
    saem_estimator = Leaspy.load(longitudinal_saving_path + "2")

    num_sample = 5
    random_patient = np.random.choice(df_dataset["subject_id"].unique(), num_sample, replace=False)
    print("Chosen random subjects:", random_patient)
    for patient_id in random_patient:
        display_individual_observations_2D(model, patient_id, dataset_path, 
                                           fitted_longitudinal_estimator=saem_estimator,
                                           save_path=f"{output_path}results_2D_subject{patient_id}_proj.pdf")
        display_individual_observations_2D(model, patient_id, dataset_path, 
                                           fitted_longitudinal_estimator=None,
                                           save_path=f"{output_path}results_2D_subject{patient_id}_noproj.pdf")


